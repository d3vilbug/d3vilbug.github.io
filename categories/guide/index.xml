<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Guide on Abdul Wahab</title>
    <link>https://d3vilbug.github.io/categories/guide/</link>
    <description>Recent content in Guide on Abdul Wahab</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://d3vilbug.github.io/categories/guide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SRePlay - Replay Protection Bypass</title>
      <link>https://d3vilbug.github.io/posts/sreplay/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://d3vilbug.github.io/posts/sreplay/</guid>
      <description>&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;&#xA;&lt;p&gt;During a Pentest, we came across a scenario where the application was sending a token in response which will be used in the next request so that it can prevent request replay. On top of that, we can&amp;rsquo;t use macros to send requests for tokens due to limitations.&lt;/p&gt;&#xA;&lt;p&gt;To overcome this challenge, we developed a &lt;strong&gt;SRePlay&lt;/strong&gt;, &lt;u&gt;&lt;em&gt;Burp Plugin to bypass Replay Protection&lt;/em&gt;&lt;/u&gt; which will extract the value of the token from the last response and automatically update the future request with the new token on the fly resulting in Request Replay Protection bypass.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AES Killer - Usage Guide</title>
      <link>https://d3vilbug.github.io/posts/aes_killer---usage-guide/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      <guid>https://d3vilbug.github.io/posts/aes_killer---usage-guide/</guid>
      <description>&lt;h2 id=&#34;demo-app&#34;&gt;Demo App&lt;/h2&gt;&#xA;&lt;p&gt;For this usage guide, weI&amp;rsquo;ll be using the &lt;a href=&#34;https://github.com/d3vilbug/demo-example-code-snippets/tree/master/AES_Killer-NodeJS-DemoApp&#34; target=_blank&gt;AES Killer - DemoÂ App&lt;/a&gt; where I have simulated all possible scenarios with different variation in request and response to cover maximum possible combination which could occur. I have simulated the following test cases.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Complete Request &amp;amp; Response&lt;/li&gt;&#xA;&lt;li&gt;Specific Request Parameters and complete response&lt;/li&gt;&#xA;&lt;li&gt;Specific JSON Request parameters &amp;amp; complete response&lt;/li&gt;&#xA;&lt;li&gt;Specific Request and Response Parameters&lt;/li&gt;&#xA;&lt;li&gt;Override Request &amp;amp; Response&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The application is sending back post data in response&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Abdul Wahab</title>
        <link>https://n00b.sh/posts/</link>
        <description>Recent content in Posts on Abdul Wahab</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 23 Apr 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://n00b.sh/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>SRePlay - Replay Protection Bypass</title>
            <link>https://n00b.sh/posts/sreplay/</link>
            <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
            
            <guid>https://n00b.sh/posts/sreplay/</guid>
            <description>Background  During a Pentest, we came across a scenario where the application was sending a token in response which will be used in the next request so that it can prevent request replay. On top of that, we can&amp;rsquo;t use macros to send requests for tokens due to limitations.
To overcome this challenge, we developed a SRePlay, Burp Plugin to bypass Replay Protection which will extract the value of the token from the last response and automatically update the future request with the new token on the fly resulting in Request Replay Protection bypass.</description>
            <content type="html"><![CDATA[<h2 id="background">Background</h2>
<hr>
<p>During a Pentest, we came across a scenario where the application was sending a token in response which will be used in the next request so that it can prevent request replay. On top of that, we can&rsquo;t use macros to send requests for tokens due to limitations.</p>
<p>To overcome this challenge, we developed a <strong>SRePlay</strong>, <u><em>Burp Plugin to bypass Replay Protection</em></u> which will extract the value of the token from the last response and automatically update the future request with the new token on the fly resulting in Request Replay Protection bypass.</p>
<h2 id="demo-application">Demo Application</h2>
<hr>
<p>For this demo, we&rsquo;ll be using <a href="https://github.com/d3vilbug/demo-example-code-snippets/tree/master/SRePlay" target=_blank>SRePlay Demo App</a> (thanks to M. Zeeshan) where we have implemented the simple Replay Protection for a demo by sending token in response for the next request.</p>
<h2 id="requirements-and-setup">Requirements and Setup</h2>
<hr>
<ul>
<li>
<p>Burpsuite</p>
</li>
<li>
<p>SRePlay - Download latest build from <a href="https://github.com/Ebryx/SRePlay/releases/tag/v2.0" target=_blank>GitHub Release</a></p>
</li>
<li>
<p>Apache / Xampp / Lampp to run <em>PHP Demo code</em>, I am using xampp docker and the setup is as follow</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">// Pull xampp docker
$ docker pull tomsik68/xampp
  
// Run docker container with PHP Demo code <span style="color:#f92672">(</span>~/Demo/SRePlay is demo app<span style="color:#f92672">)</span>
$ docker run --name myXampp -p 41061:22 -p 41062:80 -d -v ~/Demo/SRePlay:/www tomsik68/xampp
</code></pre></div><p>Hence, we can access the web app via a browser on http://localhost:41062/www/.</p>
<img src="https://i.imgur.com/HK3VFFd.png">
</li>
</ul>
<h2 id="original-request-and-response">Original Request and Response</h2>
<hr>
<p>In this case, the application is sending a token in response which is being used in the next request to perform search operation at the backend and the application expires the token once used. If we send a request with the same old token, the application will throw an Invalid Token error.</p>
<img src="https://i.imgur.com/swwu91A.gif">
<p>Now, let&rsquo;s observe this request in repeater and you will see that we can&rsquo;t repeat the request until we update the token from the last response.</p>
<img src="https://i.imgur.com/GuGsIoy.gif">
<h2 id="sreplay-configuration">SRePlay Configuration</h2>
<hr>
<p>The SRePlay configuration is as below</p>
<ul>
<li>Provide <code>Host URL</code> which is <code>http://localhost:41062/www/</code> in our case</li>
<li>Provide <code>Response parameter name</code> to extract new token i-e <code>token</code></li>
<li>Provide <code>Request parameter name</code> to replace a new token i-e <code>csrf_token</code></li>
<li>Provide <code>Parameter Initial Value</code> from last response i-e <code>MUZrNktvSHlGaGtUYU82bTNmbkMwbXZBUUlQSU9rajA=</code></li>
<li>Press <code>Start SRePlay</code></li>
</ul>
<img src="https://i.imgur.com/IfmjO7r.png">
<h2 id="sreplay-in-action">SRePlay in Action</h2>
<hr>
<p>Now that we have started the SRePlay with the required info and also selected all Burp tools like Repeater, Intruder and Scanner so we can repeat requests in Repeater, Intruder and Scanner. But for Intruder and Scanner, we have to use a single thread at a time.</p>
<img src="https://i.imgur.com/69W1CL8.gif">
<p>Likewise, we can brute force or scan parameters on this request using Intruder too.</p>
<img src="https://i.imgur.com/CwNeb7C.gif">
]]></content>
        </item>
        
        <item>
            <title>Decrypting Mobile App Traffic using AES Killer and Frida</title>
            <link>https://n00b.sh/posts/aes-killer-mobile-app-demo/</link>
            <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
            
            <guid>https://n00b.sh/posts/aes-killer-mobile-app-demo/</guid>
            <description>In this post, I&amp;rsquo;ll be discussing how to decrypt the mobile app AES Encrypted traffic on the fly using AES Killer.
Pre-requisites   Familiarity with Frida and hooking Familiarity with Burpsuite and Genymotion  Requirements and Setup    11x256 demo app and server
 Android App NodeJS Web Server    Frida
 Frida on Local machine, can be installed using pip install frida Frida Server on Android device, download latest version from GitHub Releases    Burpsuite</description>
            <content type="html"><![CDATA[<p>In this post, I&rsquo;ll be discussing how to decrypt the mobile app AES Encrypted traffic on the fly using AES Killer.</p>
<h2 id="pre-requisites">Pre-requisites</h2>
<hr>
<ul>
<li>Familiarity with Frida and hooking</li>
<li>Familiarity with Burpsuite and Genymotion</li>
</ul>
<h2 id="requirements-and-setup">Requirements and Setup</h2>
<hr>
<ul>
<li>
<p>11x256 demo app and server</p>
<ul>
<li><a href="https://github.com/11x256/frida-android-examples/tree/master/examples/5/app-release.apk" target=_blank>Android App</a></li>
<li><a href="https://github.com/11x256/frida-android-examples/blob/master/examples/5/node%20js%20server/node%20js%20server.js" target=_blank>NodeJS</a> Web Server</li>
</ul>
</li>
<li>
<p>Frida</p>
<ul>
<li>Frida on Local machine, can be installed using <code>pip install frida</code></li>
<li>Frida Server on Android device, download latest version from <a href="https://github.com/frida/frida/releases" target=_blank>GitHub Releases</a></li>
</ul>
</li>
<li>
<p>Burpsuite</p>
</li>
<li>
<p>AES Killer latest jar from <a href="https://github.com/Ebryx/AES-Killer/releases/tag/v4.0" target=_blank>GitHub Releases</a></p>
</li>
<li>
<p>Genymotion Emulator</p>
</li>
</ul>
<p>The required scripts and the applictaion can also be found on <a href="https://github.com/d3vilbug/demo-example-code-snippets/tree/master/AES_Killer%20-%20Mobile%20App%20Demo" target=_blank>AES_Killer - Mobile App Demo</a>.</p>
<h2 id="setting-up-api-server">Setting up API Server</h2>
<hr>
<p>Downloaded the <a href="https://github.com/d3vilbug/demo-example-code-snippets/blob/master/AES_Killer%20-%20Mobile%20App%20Demo/node%20js%20server/nodejs-server.js" target=_blank>nodejs-server.js</a> and run it using node</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ node nodejs-server.js 
NodeJS server started on port 127.0.0.1:1337 .......
</code></pre></div><p>Now the API server is running on our localhost port 1337</p>
<h2 id="capturing-the-application-traffic">Capturing the Application Traffic</h2>
<hr>
<p>Install the application using ADB or by drag and drop. Once installed, launch the application and you&rsquo;ll see the following screen.</p>
<img src="https://i.imgur.com/Ye9rBNX.png">
<p>This application is compiled with URL http://192.168.18.134 so we need to make a little change in our burp proxy to redirect all requests to our 127.0.0.1:1337.</p>
 <img src="https://i.imgur.com/hrBb8DX.png">
<p>Now type any username and press the <strong>Button</strong> to send a request. The application will send an encrypted request to our local server as shown below. Also, in response getting an encrypted string.</p>
<img src="https://i.imgur.com/pr8uLv8.gif">
<p>Now let&rsquo;s move on to getting the encryption keys and understanding the encryption &amp; decryption mechanism.</p>
<h2 id="getting-encryption-keys-using-frida">Getting Encryption Keys using Frida</h2>
<hr>
<p>One way of getting the encryption keys is to Reverse Engineering the application and analyze its source code but if the application is obfuscated then understanding the source code becomes relatively hard. So we&rsquo;ll be skipping the Reverse Engineering part as we already have application <a href="https://github.com/d3vilbug/demo-example-code-snippets/blob/master/AES_Killer%20-%20Mobile%20App%20Demo/android/my_activity.java" target=_banlk>source code</a> and below is the code segment from the encryption method.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java">String pre_shared_key <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;aaaaaaaaaaaaaaaa&#34;</span><span style="color:#f92672">;</span> <span style="color:#75715e">//assume that this key was not hardcoded
</span><span style="color:#75715e"></span>String generated_iv <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;bbbbbbbbbbbbbbbb&#34;</span><span style="color:#f92672">;</span>
Cipher my_cipher <span style="color:#f92672">=</span> Cipher<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;AES/CBC/PKCS5PADDING&#34;</span><span style="color:#f92672">);</span>
my_cipher<span style="color:#f92672">.</span><span style="color:#a6e22e">init</span><span style="color:#f92672">(</span>Cipher<span style="color:#f92672">.</span><span style="color:#a6e22e">ENCRYPT_MODE</span><span style="color:#f92672">,</span> <span style="color:#66d9ef">new</span> SecretKeySpec<span style="color:#f92672">(</span>pre_shared_key<span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;UTF-8&#34;</span><span style="color:#f92672">),</span> <span style="color:#e6db74">&#34;AES&#34;</span><span style="color:#f92672">),</span> <span style="color:#66d9ef">new</span> IvParameterSpec<span style="color:#f92672">(</span>generated_iv<span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;UTF-8&#34;</span><span style="color:#f92672">)));</span>
<span style="color:#66d9ef">byte</span><span style="color:#f92672">[]</span> x <span style="color:#f92672">=</span> my_cipher<span style="color:#f92672">.</span><span style="color:#a6e22e">doFinal</span><span style="color:#f92672">(</span>data<span style="color:#f92672">.</span><span style="color:#a6e22e">getBytes</span><span style="color:#f92672">());</span>
</code></pre></div><p>And we can see that the application is using <code>AES/CBC/PKCS5PADDING</code> encryption using Secret Key <code>aaaaaaaaaaaaaaaa</code> and IV Parameter <code>bbbbbbbbbbbbbbbb</code> but we&rsquo;ll also retrieve all these values by hooking java native crypto methods using Frida.</p>
<p>We&rsquo;ll be using <a href="https://github.com/d3vilbug/demo-example-code-snippets/blob/master/AES_Killer%20-%20Mobile%20App%20Demo/frida-hook.py" target=_blank>frida-hook,py</a> python script to load and execute our JS code using frida</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">import</span> time
<span style="color:#f92672">import</span> sys
<span style="color:#f92672">import</span> frida

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">on_message</span>(a, b):
    <span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;on message ....... &#34;</span>)

device <span style="color:#f92672">=</span> frida<span style="color:#f92672">.</span>get_usb_device()
pid <span style="color:#f92672">=</span> device<span style="color:#f92672">.</span>spawn([<span style="color:#e6db74">&#34;com.example.a11x256.frida_test&#34;</span>])
device<span style="color:#f92672">.</span>resume(pid)
time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">1</span>) 
session <span style="color:#f92672">=</span> device<span style="color:#f92672">.</span>attach(pid)

<span style="color:#75715e"># session = frida.get_usb_device().attach(&#39;com.example.a11x256.frida_test&#39;)</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;aes-hook.js&#34;</span>) <span style="color:#66d9ef">as</span> f:
    script <span style="color:#f92672">=</span> session<span style="color:#f92672">.</span>create_script(f<span style="color:#f92672">.</span>read())
script<span style="color:#f92672">.</span>on(<span style="color:#e6db74">&#34;message&#34;</span>, on_message)
script<span style="color:#f92672">.</span>load()

sys<span style="color:#f92672">.</span>stdin<span style="color:#f92672">.</span>read()
</code></pre></div><p>We can use this <a href="https://github.com/d3vilbug/demo-example-code-snippets/blob/master/AES_Killer%20-%20Mobile%20App%20Demo/aes-hook.js" target=_blank>aes-hook.js</a> to hook all related methods. We can use the below code snippet to directly hook the Secret Key and IV Parameter constructors so whenever the application initializes the object, we&rsquo;ll get our Secret Key and IV.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">secretKeySpec</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#39;javax.crypto.spec.SecretKeySpec&#39;</span>);
<span style="color:#a6e22e">secretKeySpec</span>.<span style="color:#a6e22e">$init</span>.<span style="color:#a6e22e">overload</span>(<span style="color:#e6db74">&#39;[B&#39;</span>, <span style="color:#e6db74">&#39;java.lang.String&#39;</span>).<span style="color:#a6e22e">implementation</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$init</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;================= SecretKeySpec =====================&#34;</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;SecretKeySpec :: bytesToString :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToString</span>(<span style="color:#a6e22e">a</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;SecretKeySpec :: bytesToBase64 :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToBase64</span>(<span style="color:#a6e22e">a</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;SecretKeySpec :: bytesToBase64 :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToHex</span>(<span style="color:#a6e22e">a</span>));
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>;
}


<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ivParameterSpec</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#39;javax.crypto.spec.IvParameterSpec&#39;</span>);
<span style="color:#a6e22e">ivParameterSpec</span>.<span style="color:#a6e22e">$init</span>.<span style="color:#a6e22e">overload</span>(<span style="color:#e6db74">&#39;[B&#39;</span>).<span style="color:#a6e22e">implementation</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">$init</span>(<span style="color:#a6e22e">a</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;\n================== IvParameterSpec ====================&#34;</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;IvParameterSpec :: bytesToString :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToString</span>(<span style="color:#a6e22e">a</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;IvParameterSpec :: bytesToBase64 :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToBase64</span>(<span style="color:#a6e22e">a</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;IvParameterSpec :: bytesToBase64 :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToHex</span>(<span style="color:#a6e22e">a</span>));
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>;
}
</code></pre></div><p>Or we can hook <code>Cipher.init()</code> method too to get the Secret Key and IV Parameter using this code segment.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cipher</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#39;javax.crypto.Cipher&#39;</span>);
<span style="color:#a6e22e">cipher</span>.<span style="color:#a6e22e">init</span>.<span style="color:#a6e22e">overload</span>(<span style="color:#e6db74">&#39;int&#39;</span>, <span style="color:#e6db74">&#39;java.security.Key&#39;</span>, <span style="color:#e6db74">&#39;java.security.spec.AlgorithmParameterSpec&#39;</span>).<span style="color:#a6e22e">implementation</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span>) {
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">result</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">init</span>(<span style="color:#a6e22e">a</span>, <span style="color:#a6e22e">b</span>, <span style="color:#a6e22e">c</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;\n================ cipher.init() ======================&#34;</span>);

    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">N_ENCRYPT_MODE</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;1&#39;</span>) 
    {
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;init :: Encrypt Mode&#34;</span>);    
    }
    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span>(<span style="color:#a6e22e">N_DECRYPT_MODE</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;2&#39;</span>)
    {
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;init :: Decrypt Mode&#34;</span>);    
    }

    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Mode :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">a</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Secret Key :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToHex</span>(<span style="color:#a6e22e">b</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Secret Key :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToBase64</span>(<span style="color:#a6e22e">b</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;IV Param :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToHex</span>(<span style="color:#a6e22e">c</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;IV Param :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToBase64</span>(<span style="color:#a6e22e">c</span>));

    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">result</span>;
}
</code></pre></div><p>And if we want to observe data encryption and decryption on runtime, we have to hook <code>Cipher.doFinal()</code> method for that.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-javascript" data-lang="javascript"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">cipher</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Java</span>.<span style="color:#a6e22e">use</span>(<span style="color:#e6db74">&#39;javax.crypto.Cipher&#39;</span>);
<span style="color:#a6e22e">cipher</span>.<span style="color:#a6e22e">doFinal</span>.<span style="color:#a6e22e">overload</span>(<span style="color:#e6db74">&#34;[B&#34;</span>).<span style="color:#a6e22e">implementation</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">x</span>) {
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;\n================ doFinal() ======================&#34;</span>);
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">ret</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">cipher</span>.<span style="color:#a6e22e">doFinal</span>.<span style="color:#a6e22e">overload</span>(<span style="color:#e6db74">&#34;[B&#34;</span>).<span style="color:#a6e22e">call</span>(<span style="color:#66d9ef">this</span>, <span style="color:#a6e22e">x</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;doFinal :: data to encrypt/decrypt - base64 :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToBase64</span>(<span style="color:#a6e22e">x</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;doFinal :: data ro encrypt/decrypt - string :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">bytesToString</span>(<span style="color:#a6e22e">x</span>));

    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;doFinal :: data ro encrypt/decrypt - return value :: &#34;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">ret</span>);
    <span style="color:#66d9ef">return</span> <span style="color:#a6e22e">ret</span>;
}
</code></pre></div><h2 id="hooking-with-frida">Hooking with Frida</h2>
<hr>
<p>Now run the python script to launch the application and execute our JS code.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ python frida-hook.py 
Script loaded successfully ..... 
</code></pre></div><img src="https://i.imgur.com/Bwi17Bb.gif">
<p>Our JS Code is successfully loaded now, lets send a request by pressing the <strong>Button</strong>.</p>
<img src="https://i.imgur.com/UEpSXDX.gif">
<p>And if we only want to observe runtime data encrypted and decryption, comment the rest of the code except  <code>cipher.doFinal</code> method from our js file.</p>
<img src="https://i.imgur.com/9oT0iKb.gif">
<pre>
For iOS please use <a href="https://github.com/noobpk/frida-ios-hook" target=_blank>Frida iOS Hook</a> to get AES Secret Key and IV
</pre>
<h2 id="configuring-aes-killer">Configuring AES Killer</h2>
<hr>
<p>Now that we have our Secret Key, IV Parameter and Encryption method from Frida hooking too</p>
<ul>
<li>
<p>Cipher - <code>AES/CBC/PKCS5PADDING</code></p>
</li>
<li>
<p>Secret Key - <code>YWFhYWFhYWFhYWFhYWFhYQ==</code> which is base64 of <code>aaaaaaaaaaaaaaaa</code></p>
</li>
<li>
<p>IV Parameter - <code>YmJiYmJiYmJiYmJiYmJiYg==</code> which is base64 of <code>bbbbbbbbbbbbbbbb</code></p>
</li>
<li>
<p>As the application is sending complete request body encrypted, so we&rsquo;ll select <code>Complete Request Body</code> from <strong>Request Options</strong></p>
</li>
<li>
<p>The application is getting encrypted string in response, so we&rsquo;ll select <code>Complete Response Body</code> from <strong>Response Options</strong></p>
</li>
<li>
<p>Host - http://127.0.0.1:1337</p>
</li>
<li>
<p>Now Press <code>Start AES Killer</code></p>
</li>
</ul>
<img src="https://i.imgur.com/FRl1DYB.gif">
<h2 id="decrypting-the-application-traffic-using-aes-killer">Decrypting the Application Traffic using AES Killer</h2>
<hr>
<p>Upon starting AES Killer, we can observe that the Burp has started to show us decrypted traffic while Burp sending encrypted traffic to the application and server.</p>
<img src="https://i.imgur.com/JfrH65u.gif">
<h2 id="aes-killer-with-repeater-intruder-and-scanner">AES Killer with Repeater, Intruder and Scanner</h2>
<hr>
<p>Once we start AES Killer, it takes control of Burp <code>IHttpListener.processHttpMessage</code> which is responsible for handling all outgoing and incoming traffic and AES Killer do the following</p>
<ul>
<li>Before sending the final request to a server, <code>ProcessHttpMessage</code> encrypt the request</li>
<li>Upon receiving a response,  <code>ProcessHttpMessage</code> decrypt the response first before showing it to us</li>
</ul>
<p>So we&rsquo;ll only be getting the Plain Text Response and can play with Plain Text request.</p>
<img src="https://i.imgur.com/MVhBHcS.gif">
<h2 id="manual-encryption-and-decryption">Manual Encryption and Decryption</h2>
<hr>
<p>We can also manually encrypt and decrypt strings using AES Killer. Let&rsquo;s take an encrypted string from the request <code>TYROd49FWJjYBfv02oiUzwRQgxWMWiw4W3oCqvNf8h3bnb7X0bobypFzMt797CYU</code> and decrypt it using AES Killer. Similarly, we can perform the encryption too.</p>
<img src="https://i.imgur.com/rjWDACt.gif">
]]></content>
        </item>
        
        <item>
            <title>AES Killer - Usage Guide</title>
            <link>https://n00b.sh/posts/aes_killer-usage-guide/</link>
            <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
            
            <guid>https://n00b.sh/posts/aes_killer-usage-guide/</guid>
            <description>Demo App  For this usage guide, weI&amp;rsquo;ll be using the AES Killer - Demo App where I have simulated all possible scenarios with different variation in request and response to cover maximum possible combination which could occur. I have simulated the following test cases.
 Complete Request &amp;amp; Response Specific Request Parameters and complete response Specific JSON Request parameters &amp;amp; complete response Specific Request and Response Parameters Override Request &amp;amp; Response  The application is sending back post data in response</description>
            <content type="html"><![CDATA[<h2 id="demo-app">Demo App</h2>
<hr>
<p>For this usage guide, weI&rsquo;ll be using the <a href="https://github.com/d3vilbug/demo-example-code-snippets/tree/master/AES_Killer-NodeJS-DemoApp" target=_blank>AES Killer - Demo App</a> where I have simulated all possible scenarios with different variation in request and response to cover maximum possible combination which could occur. I have simulated the following test cases.</p>
<ul>
<li>Complete Request &amp; Response</li>
<li>Specific Request Parameters and complete response</li>
<li>Specific JSON Request parameters &amp; complete response</li>
<li>Specific Request and Response Parameters</li>
<li>Override Request &amp; Response</li>
</ul>
<p>The application is sending back post data in response</p>
<h3 id="demo-app-setup">Demo App Setup</h3>
<p>Download the <a href="https://github.com/d3vilbug/demo-example-code-snippets/tree/master/AES_Killer-NodeJS-DemoApp" target=_blank>AES Killer - Demo App</a> and do the following</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ cd AES_Killer-NodeJS-DemoApp

// Install packages
$ npm install express
$ npm install body-parser
$ npm install crypto-js
$ npm install cors


// Start the server
$ node server.js
Express server started on port <span style="color:#ae81ff">3000</span> ...... 
</code></pre></div><p>The running app will look like this</p>
<img src="https://i.imgur.com/uFzlumM.png">
<p>I&rsquo;ll be using the following code snippet for the encryption and decryption in this demo where</p>
<ul>
<li>Secret key is <code>aaaaaaaaaaaaaaaa</code> and its base64 is <code>YWFhYWFhYWFhYWFhYWFhYQ==</code></li>
<li>IV Parameter is <code>bbbbbbbbbbbbbbbb</code> and its base64 is <code>YmJiYmJiYmJiYmJiYmJiYg==</code></li>
<li>As my Express server is running on localhost port 3000 so my host will be http://127.0.0.1:3000/</li>
</ul>
<img src="https://i.imgur.com/7gvIxLK.png">
<h2 id="aes-killer-setup">AES Killer Setup</h2>
<hr>
<p>Download the latest jar file from <a href="https://github.com/Ebryx/AES-Killer/releases" target=_blank>GitHub Release</a> and add it to Burp Extender.</p>
<img src="https://i.imgur.com/LKYQMoj.png">
<p>Now let&rsquo;s move towards the demo.</p>
<br>
<h2 id="example-01---complete-request-and-response-body">Example 01 - Complete Request and Response Body</h2>
<hr>
<p>If we issue a request upon pressing a Login button, we can observe that the application is sending complete requests and response body encrypted.</p>
<img src="https://i.imgur.com/dhv5qMM.png">
<p>The configuration of AES Killer for this example is quite simple, all we need to do is following</p>
<ul>
<li>Input <code>Secret Key</code>, <code>IV Parameter</code> and <code>Host URL</code></li>
<li>Select <code>Complete Request Body</code> from Request Options</li>
<li>Select <code>Complete Response Body</code> from Response Options</li>
<li>Press <strong><code>Start AES Killer</code></strong> button as shown below and you will get a prompt with <code>AES Killer started !!!</code></li>
</ul>
<img src="https://i.imgur.com/Cuxnhgb.png">
<p>Now again send the request from our demo web app and go back to burp proxy where you can see the decrypted request under Edited request and decrypted response under Original response options. Upon fetching the request on proxy</p>
<ul>
<li>IProxyListener.processProxyMessage will decrypt the request&rsquo;s body and update the request with a decrypted body</li>
<li>Before sending a request to the server, IHttpListener.processHttpMessage will encrypt the whole request&rsquo;s body and send the updated encrypted request to the server</li>
<li>On getting encrypted response IHttpListener.processHttpMessage will decrypt the response&rsquo;s body</li>
<li>IProxyListener.processProxyMessage will encrypt the decrypted request&rsquo;s body and update the request</li>
</ul>
<p>So by using the above flow, we can see and tamper <strong>clear text request</strong> in <strong>Burp Proxy, Repeater, Scanner, Intruder</strong> while the AES Killer will handle the encryption on the backend before sending it to Server and Application (Web / Mobile).</p>
<img src="https://i.imgur.com/yalMcsE.png">
<p>We can send this decrypted request to Repeater for further testing</p>
<img src="https://i.imgur.com/hPB0AG9.png">
<p>Now we can also do brute forcing using intruder</p>
<img src="https://i.imgur.com/EsIznh6.png">
<br>
<img src="https://i.imgur.com/ldIq7EK.png">
<br>
<img src="https://i.imgur.com/fDL9ez0.png">
<br>
<h2 id="example-02---specific-request-parameters-and-complete-response">Example 02 - Specific Request Parameters and Complete Response</h2>
<hr>
<p>In this example, the application is sending encrypted request parameters to the server and getting an encrypted response</p>
<img src="https://i.imgur.com/VLV2Lfi.png"> 
<p>To get plain text traffic in such cases, please use the following configuration for AES Killer</p>
<ul>
<li>Input <code>Secret Key</code>, <code>IV Parameters</code> and <code>Host URL</code></li>
<li>Select <code>Complete Response Body</code> from <code>Response Options</code></li>
<li>Select <code>Specific Request Parameters</code> from <code>Request Options</code> and provide <strong>parameter names</strong> separated with space</li>
<li>Press <code>Start AES Killer</code></li>
</ul>
<img src="https://i.imgur.com/c8pQEMg.png">
<p>Now trying sending Login request again and you&rsquo;ll see the decrypted request and response in burp</p>
<img src="https://i.imgur.com/yOR9y18.png">
<p>We can use this decrypted request in Repeater, Scanner and Intruder, same as the previous case.</p>
<br>
<h2 id="example-03---specific-json-request-parameters-and-complete-response">Example 03 - Specific JSON Request Parameters and Complete Response</h2>
<hr>
<p>In this example, we can see that the application is sending encrypted request parameters same as the previous case but now the content type is JSON and Burp API handles JSON parameters differently from normal Form or Multi-part content type.  In addition to that, this time the application is sending a response in Plain Text without any Encryption.</p>
<img src="https://i.imgur.com/Nj9kxVe.png">
<p>The configuration of AES Killer for this example is exactly the same as Example 02 but with a slight difference in Response Options</p>
<ul>
<li>Input <code>Secret Key</code>, <code>IV Parameters</code> and <code>Host URL</code></li>
<li>Select <code>Ignore Response</code> from <code>Response Options</code> as there is no encryption implemented on response in this example</li>
<li>Select <code>Specific Request Parameters</code> from <code>Request Options</code> and provide <strong>parameter names</strong> separated with space</li>
<li>Press <code>Start AES Killer</code></li>
</ul>
<img src="https://i.imgur.com/COva3tF.png">
<p>Let&rsquo;s move back to the application and send the request again</p>
<img src="https://i.imgur.com/Cfa4IO2.png">
<p>This time response is intact while AES Killer decrypted the JSON parameters in the request.</p>
<br>
<h2 id="example-04---specific-request-and-response-parameters">Example 04 - Specific Request and Response Parameters</h2>
<hr>
<p>The application is sending encrypted parameters in JSON and also getting encrypted parameters in the JSON body.</p>
<img src="https://i.imgur.com/vCsYpxc.png">
<p>The AES Killer configuration for such cases is as follow</p>
<ul>
<li>Input <code>Secret Key</code>, <code>IV Parameters</code> and <code>Host URL</code></li>
<li>Select <code>Specific Response Parameters</code> from <code>Response Options</code> as provide response <strong>parameter names</strong> separated with space</li>
<li>Select <code>Specific Request Parameters</code> from <code>Request Options</code> and provide request <strong>parameter names</strong> separated with space</li>
<li>Press <code>Start AES Killer</code></li>
</ul>
<img src="https://i.imgur.com/8HVWZHf.png">
<p>If we send request again, we&rsquo;ll be seeing the decrypted request and response parameters</p>
<img src="https://i.imgur.com/RMbTR74.png">
<p>The AES Killer will automatically encrypt the request before sending it to the application or server, so we can pentest it however we want</p>
 <img src="https://i.imgur.com/zYOQTVo.png">
<br>
<h2 id="example-05---override-request-and-response-variant-01">Example 05 - Override Request and Response (Variant-01)</h2>
<hr>
<p>In this example, we have a special case where the application is encrypting the whole request and then sending the encrypted string in the data parameter. Also, the application is sending encrypted string is JSON parameter in the response body.</p>
<img src="https://i.imgur.com/w7EVQX7.png">
<p>The AES Killer configuration for this type of scenarios is as below</p>
<ul>
<li>Input <code>Secret Key</code>, <code>IV Parameters</code> and <code>Host URL</code></li>
<li>Select <code>Specific Response Parameters</code> from <code>Response Options</code> as provide response <strong>parameter name</strong> separated with space and also select <code>Override Complete Response Body - JSON</code></li>
<li>Select <code>Specific Request Parameters</code> from <code>Request Options</code> and provide request <strong>parameter name</strong> separated with space and also select <code>Override Complete Request Body - Form</code></li>
<li>Press <code>Start AES Killer</code></li>
</ul>
<img src="https://i.imgur.com/bILppXv.png">
<p>Send request again from the Demo App again and observe the Request and Response</p>
<img src="https://i.imgur.com/JqohhEA.png">
<br>
<h2 id="example-06---override-request-and-response-variant-02">Example 06 - Override Request and Response (Variant-02)</h2>
<hr>
<p>In this example, the application behavior is inverse of Example 05 as shown below</p>
<img src="https://i.imgur.com/L2iyGKn.png">
<p>The AES Killer configuration for this type of scenarios is as below</p>
<ul>
<li>Input <code>Secret Key</code>, <code>IV Parameters</code> and <code>Host URL</code></li>
<li>Select <code>Specific Response Parameters</code> from <code>Response Options</code> as provide response <strong>parameter name</strong> separated with space and also select <code>Override Complete Response Body - Form</code></li>
<li>Select <code>Specific Request Parameters</code> from <code>Request Options</code> and provide request <strong>parameter name</strong> separated with space and also select <code>Override Complete Request Body - JSON</code></li>
<li>Press <code>Start AES Killer</code></li>
</ul>
<img src="https://i.imgur.com/GIUSkk6.png">
<p>The Decrypted Request and Response is</p>
<img src="https://i.imgur.com/LnOW8g4.png">
]]></content>
        </item>
        
    </channel>
</rss>
